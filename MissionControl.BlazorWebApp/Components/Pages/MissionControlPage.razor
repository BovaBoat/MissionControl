@page "/missionControlPage"

@using MissionControl.Domain
@using MissionControl.Infrastructure

@rendermode InteractiveServer

@inject MissionControl.BlazorWebApp.Services.ConfigDataService ConfigData
@inject MissionControl.BlazorWebApp.Services.MissionControlDataService MissionControlData
@inject MissionControl.BlazorWebApp.Services.ActionLoggerService ActionLogger

<h3>MissionControl</h3>

<div class="status-square">
    @GetStatusText()
</div>

<span>Selected Vessel Name: @ConfigData.VesselName</span>

<div class="form-container">
    <h2>Enter Coordinates</h2>
    <form id="coordinateForm">
        <label for="latitude">Latitude:</label>
        <input @bind="latitudeString" type=" text" id="latitude" name="latitude" placeholder="Enter latitude" required>

        <label for="longitude">Longitude:</label>
        <input @bind="longitudeString" type="text" id="longitude" name="longitude" placeholder="Enter longitude" required>

        <button type="submit" onsubmit="OnMissionControlDataSubmit">Submit</button>
        <button type="button" class="btn btn-primary mt-3" @onclick="Search">Search Flights</button>
    </form>
</div>

<button class="btn btn-success" @onclick="StartMission">Start Mission</button>

<ul class="log-list">
    @foreach (var log in ActionLogger.Logs)
    {
        <li>@log</li>
    }
</ul>

@code
{
    public void Search()
    {
        
    }
    private string latitudeString = "";
    private string longitudeString = "";

    private string GetStatusText()
    {
        return ConfigData.IsConfigured ? "Configured" : "Not Configured";
    }

    private void OnMissionControlDataSubmit()
    {
        MissionControlData.SetCoordinatesFromString(latitudeString, longitudeString);
    }

    private async Task StartMission()
    {
        var missionControler = new MissionControler();
        var communicationConfig = new MqttCommunicationConfig(ConfigData.BrokerAddress, ConfigData.PublishTopic, ConfigData.SubscribeTopic);
        var nodeConfig = new NodeConfig(ConfigData.VesselName, ConfigData.MissionControlName);

        try
        {
            missionControler.Configure(communicationConfig, nodeConfig);
            await missionControler.Connect();
            LogAndRenderUI("Connected to broker", LogEntryType.INFO);
            var destinationCoordinates = new MissionControlLib.Waypoints.Coordinates(MissionControlData.Latitude, MissionControlData.Longitude);
            await missionControler.StartMission(destinationCoordinates);
            LogAndRenderUI("Mission Started", LogEntryType.INFO);
        }
        catch(Exception e)
        {
            LogAndRenderUI(e.Message, LogEntryType.ERROR);
        }   
    }

    enum LogEntryType
    {
        INFO,
        ERROR
    }

    private void LogAndRenderUI(string logMessage, LogEntryType type)
    {
        if (type == LogEntryType.INFO)
            ActionLogger.Log.Info(logMessage);

        switch (type)
        {
            case LogEntryType.INFO:
                ActionLogger.Log.Info(logMessage);
                break;
            case LogEntryType.ERROR:
                ActionLogger.Log.Error(logMessage);  // Replace with desired action
                break;
        }

        StateHasChanged();
    }
}
